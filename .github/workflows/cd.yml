name: Decapy CD
on:
  push:
    branches: [ cicd-setup2 ]

env:
  ECS_CLUSTER: decapay-api                 
  ECS_SERVICE: decapay-api-service2              
  ECS_TASK_DEFINITION: task-definition.json 
  CONTAINER_NAME: decapay-api-container 
  ECR_REPOSITORY: decapay-api          
  AWS_REGION: us-east-2                   

jobs:
  build-and-push:
    name: Build, Push to ECR and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: cat
      run: cat src/main/resources/application.yml
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: |
        export SPRING_DATASOURCE_PASSWORD=${{secrets.SPRING_DATASOURCE_PASSWORD}}
        export AWS_ACCESS_KEY=${{secrets.SMTP_AWS_ACCESS_KEY}}
        export AWS_SECRET=${{secrets.SMTP_AWS_SECRET}}
        export AWS_SMTP_HOST=${{secrets.AWS_SMTP_HOST}}
        export AWS_SMTP_USERNAME=${{secrets.AWS_SMTP_USERNAME}}
        export AWS_SMTP_PASSWORD=${{secrets.AWS_SMTP_PASSWORD}}
        mvn clean install -Dspring.profiles.active=prod

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true